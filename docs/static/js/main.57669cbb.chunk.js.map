{"version":3,"sources":["api/axios.ts","app/TodoForm.tsx","app/App.tsx","serviceWorker.ts","examples/redux-example/types.ts","examples/redux-example/reducer.ts","examples/redux-example/index.tsx","index.tsx"],"names":["todos","id","name","done","axios","url","payload","data","slice","todo","find","push","Error","Promise","resolve","TodoForm","refreshTodos","React","useState","setName","className","onSubmit","e","preventDefault","newTodo","Math","random","trim","value","onChange","target","placeholder","type","App","setTodos","then","useEffect","onToggleTodo","a","map","index","onClick","key","classNames","Boolean","window","location","hostname","match","SEND_MESSAGE","DELETE_MESSAGE","initialState","messages","rootReducer","combineReducers","chat","state","action","filter","message","timestamp","meta","store","createStore","dispatch","Connected","connect","wrap","props","messageAction","user","ReactDom","render","document","getElementById","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.57669cbb.chunk.js","sourcesContent":["let todos = [\n  {\n    id: 1,\n    name: '待办1',\n    done: false\n  },\n  {\n    id: 2,\n    name: '待办2',\n    done: false\n  },\n  {\n    id: 3,\n    name: '待办3',\n    done: false\n  }\n]\n\ntype Url = '/api/todos' | '/api/toggle' | '/api/add'\n\nconst axios = <T>(url: Url, payload?: any): Promise<T> | never => {\n  let data\n  switch (url) {\n    case '/api/todos': {\n      data = todos.slice()\n      break\n    }\n    case '/api/toggle': {\n      const todo = todos.find(({ id }) => id === payload)\n      if (todo) {\n        todo.done = !todo.done\n      }\n      break\n    }\n    case '/api/add': {\n      todos.push(payload)\n      break\n    }\n    default: {\n      throw new Error('Unknown api')\n    }\n  }\n\n  return Promise.resolve(data as any)\n}\n\nexport default axios\n","import React from 'react'\nimport axios from '../api/axios'\n\ninterface Props {\n  refreshTodos: () => void\n}\n\nconst TodoForm: React.FC<Props> = ({ refreshTodos }) => {\n  const [name, setName] = React.useState('')\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value)\n  }\n\n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n\n    const newTodo = {\n      id: Math.random(),\n      name,\n      done: false\n    }\n    \n    if (name.trim()) {\n      // 这边第二个参数没有做类型约束\n      axios('/api/add', newTodo)\n      refreshTodos()\n      setName('')\n    }\n  }\n\n  return (\n    <form className=\"todo-form\" onSubmit={onSubmit}>\n      <input\n        className=\"todo-input\"\n        value={name}\n        onChange={onChange}\n        placeholder=\"请输入待办事项\"\n      />\n      <button type=\"submit\">新增</button>\n    </form>\n  )\n}\n\nexport default TodoForm\n","import React, { useState, useEffect } from 'react'\nimport classNames from 'classnames'\nimport TodoForm from './TodoForm'\nimport axios from '../api/axios'\nimport '../styles/App.css'\n\ntype Todo = {\n  id: number\n  // 名字\n  name: string\n  // 是否完成\n  done: boolean\n}\n\ntype Todos = Todo[]\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<Todos>([])\n\n  const refreshTodos = () => {\n    // 这边必须手动声明axios的返回类型。\n    axios<Todos>('/api/todos').then(setTodos)\n  }\n\n  useEffect(() => {\n    refreshTodos()\n  }, [])\n\n  const onToggleTodo = async (todo: Todo) => {\n    // 这边第二个参数没有做类型约束\n    await axios('/api/toggle', todo.id)\n    refreshTodos()\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <ul>\n          <TodoForm refreshTodos={refreshTodos} />\n          {todos.map((todo, index) => {\n            return (\n              <li\n                onClick={() => onToggleTodo(todo)}\n                key={index}\n                className={classNames({\n                  done: todo.done\n                })}\n              >\n                {todo.name}\n              </li>\n            )\n          })}\n        </ul>\n      </header>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export interface Message {\n  user: string\n  message: string\n  timestamp: number\n}\n\nexport interface ChatState {\n  messages: Message[]\n}\n\nexport interface SystemState {\n  loggedIn: boolean\n  session: string\n  userName: string\n}\n\nexport const SEND_MESSAGE = 'SEND_MESSAGE'\nexport const DELETE_MESSAGE = 'DELETE_MESSAGE'\n\ninterface SendMessageAction {\n  type: typeof SEND_MESSAGE\n  payload: Message\n}\n\ninterface DeleteMessageAction {\n  type: typeof DELETE_MESSAGE\n  meta: {\n    timestamp: number\n  }\n}\n\nexport type ChatActionTypes = SendMessageAction | DeleteMessageAction\n\nexport function sendMessage(newMessage: Message): ChatActionTypes {\n  return {\n    type: SEND_MESSAGE,\n    payload: newMessage\n  }\n}\n\n\n// TypeScript infers that this function is returning DeleteMessageAction\nexport function deleteMessage(timestamp: number): ChatActionTypes {\n  return {\n    type: DELETE_MESSAGE,\n    meta: {\n      timestamp\n    }\n  }\n}\n\nexport const UPDATE_SESSION = 'UPDATE_SESSION'\n\ninterface UpdateSessionAction {\n  type: typeof UPDATE_SESSION\n  payload: SystemState\n}\n\nexport type SystemActionTypes = UpdateSessionAction\n","import {\n  ChatState,\n  ChatActionTypes,\n  SEND_MESSAGE,\n  DELETE_MESSAGE\n} from './types'\n\nconst initialState: ChatState = {\n  messages: []\n}\n\nexport function chatReducer(\n  state = initialState,\n  action: ChatActionTypes\n): ChatState {\n  switch (action.type) {\n    case SEND_MESSAGE:\n      return {\n        messages: [...state.messages, action.payload]\n      }\n    case DELETE_MESSAGE:\n      return {\n        messages: state.messages.filter(\n          message => message.timestamp !== action.meta.timestamp\n        )\n      }\n    default:\n      return state\n  }\n}\n","import React from \"react\";\nimport ReactDom from \"react-dom\";\nimport { connect, Provider } from \"react-redux\";\nimport { createStore, combineReducers } from \"redux\";\n\nimport { chatReducer } from \"./reducer\";\nimport { sendMessage, ChatState } from \"./types\";\n\nconst rootReducer = combineReducers({\n  chat: chatReducer,\n});\n\ntype reducerType = typeof rootReducer;\n\nconst store = createStore(rootReducer);\n\nstore.dispatch({\n  type: \"SEND_MESSAGE\",\n});\n\nexport type AppState = ReturnType<reducerType>;\n\nconst wrap = connect(\n  (state: AppState) => ({\n    chat: state.chat,\n  }),\n  dispatch => ({dispatch})\n);\n\ninterface AppProps {\n  chat: ChatState;\n  dispatch: Function\n}\n\nconst Count: React.FC<AppProps> = props => {\n  const { chat, dispatch } = props;\n\n  const messageAction = sendMessage({\n    user: \"ssh\",\n    message: \"aa\",\n    timestamp: 2,\n  });\n\n  return (\n    <div>\n      聊天现在是\n      {chat.messages.map(message => {\n        return <span>{message && message.message}</span>;\n      })}\n      <button onClick={() => dispatch(messageAction)}>发送消息</button>\n    </div>\n  );\n};\n\nconst Connected = wrap(Count);\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <Connected />\n    </Provider>\n  );\n};\n\nReactDom.render(<App />, document.getElementById(\"app\"));\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.css'\nimport App from './app/App'\nimport * as serviceWorker from './serviceWorker'\nimport './examples/redux-example/index'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}